---
title: Defining Free User Cohorts
author: Julian Winternheimer
date: '2022-08-03'
slug: []
categories: []
tags: []
---

In a [previous analysis](https://bufferanalysis.com/blog/2022-06-20-buffer-s-free-users/), we analyzed the behavior and characteristics of Buffer's active free users.

One of the goals of that analysis was to define cohorts within the free user base to inform qualification. We'll address that more directly here.

From conversations with the team, we want to identify behaviors that correlate with paid conversion early on in the user journey. Because [over 75% of conversions happen within the first 30 days after signing up](https://mixpanel.com/s/1l8vvQ), we'll use conversion within 30 days as the desired outcome.

One important thing to note is that free users exclude those that are on trials, so we'll only look at people that did not sign up with a trial.


```{r include = FALSE, message = FALSE, warning = FALSE}
# load libraries
library(buffer)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(DBI)
library(bigrquery)
library(broom)
library(glmnet)
```
 

## Data Collection
To answer these questions, we'll collect data from over one million signups that occurred since January 1, 2021 with the SQL query below.

```{r eval = FALSE, warning = FALSE, message = FALSE}
# define sql query
sql <- "
  select
    u.user_id
    , u.stripe_customer_id
    , u.signup_at_date as signup_date
    , date_trunc(u.signup_at_date, week) as signup_week
    , u.did_signup_from_mobile as mobile_signup
    , u.is_team_member
    , u.is_currently_trialing
    , u.did_signup_on_trial as trial_signup
    , avg(ss.session_duration_minutes) as avg_session_duration
    , count(distinct ss.session_id) as sessions
    , date(min(a.timestamp)) as activated_at
    , date(min(s.first_paid_invoice_created_at)) as converted_date
    , count(distinct a.id) as actions
    , count(distinct a.date) as days_active
    , count(distinct date(ss.started_at)) as session_days
    , count(distinct case when a.product = 'publish' then a.id end) as posts_created
    , count(distinct case when a.product = 'publish' then a.date end) as posts_created_days
    , count(distinct case when a.product = 'analyze' then a.id end) as analyze_actions
    , count(distinct case when a.product = 'engage' then a.id end) as engage_actions
    , count(distinct case when a.product = 'start_pages' then a.id end) as sp_actions
    , count(distinct ch.id) as channels_connected
    , count(distinct t.id) as trials_started
  from dbt_buffer.buffer_users as u
  left join dbt_buffer.stripe_paid_subscriptions as s
    on u.stripe_customer_id = s.customer_id
    and s.first_paid_invoice_created_at >= u.signup_at
  left join dbt_buffer.buffer_key_actions as a
    on u.user_id = a.user_id
    and a.timestamp >= u.signup_at
    and a.timestamp < timestamp_add(u.signup_at, interval 7 day)
  left join dbt_buffer.segment_channels_connected as ch
    on u.user_id = ch.user_id
    and ch.timestamp >= u.signup_at
    and ch.timestamp < timestamp_add(u.signup_at, interval 7 day)
  left join dbt_buffer.segment_trial_starts as t
    on u.user_id = t.user_id
    and t.timestamp >= u.signup_at
    and t.timestamp < timestamp_add(u.signup_at, interval 7 day)
  left join dbt_buffer.segment_sessions as ss
    on ss.dbt_visitor_id = u.user_id
    and ss.started_at >= u.signup_at
    and date(ss.started_at) < date_add(u.signup_at_date, interval 7 day)
  where u.signup_at >= '2022-01-01'
  group by 1,2,3,4,5,6,7,8
"

#  connect to bigquery
con <- dbConnect(
  bigrquery::bigquery(),
  project = "buffer-data"
)

# collect data from bigquery
users <- dbGetQuery(con, sql, page_size = 500000)

# save data as rds object
saveRDS(users, "free_cohorts.rds")
```

```{r include = FALSE}
# read data
users <- readRDS("free_cohorts.rds")

# tidy data
users <- users %>% 
  filter(!is_team_member & signup_date < "2022-07-05") %>% 
  mutate(converted = (!is.na(converted_date) & 
           as.numeric(converted_date - signup_date) <= 30),
         activated = !is.na(activated_at) &
           as.numeric(activated_at - signup_date) <= 7)
```


## Exploratory Analysis

Approximately 27% of these users signed up on a mobile device.

```{r}
# calculate percentage that signed up on mobile
users %>% 
  group_by(mobile_signup) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(prop = percent(users / sum(users)))
```

Around 30% took at least one key action within 7 days of signing up. 

```{r}
# calculate proportion that activated
users %>% 
  group_by(activated) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(prop = percent(users / sum(users)))
```

There's a large group of active free users that only took a key action in one day of their first week. Over 60% of mobile signups that activated only took a key action on a single day That's one group of users.

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot distribution of days active
users %>% 
  filter(activated) %>% 
  group_by(mobile_signup, days_active) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(percent = users / sum(users)) %>% 
  buffplot(aes(x = days_active, y = percent, fill = mobile_signup)) +
  geom_col() +
  facet_wrap(~mobile_signup) +
  scale_y_continuous(labels = percent) +
  labs(x = "Days Active First Week", fill = "Mobile Signup", y = NULL)
```

The plots below show that free users that take key actions in at least 3 days during their first week are around three times likely to convert than users that are only active one day (12% vs 4%). 
Only 20% of users that activate are active 3 or more days in their first week.

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot conversion rates for days active
users %>% 
  filter(activated & days_active < 8) %>% 
  group_by(days_active, converted) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(percent = users / sum(users)) %>% 
  filter(converted) %>% 
  buffplot(aes(x = days_active, y = percent)) +
  geom_col() +
  scale_y_continuous(labels = percent, 
                     limits = c(0, 0.16), 
                     breaks = seq(0, 0.16, 0.02)) +
  scale_x_continuous(breaks = seq(0, 7, 1)) +
  labs(x = "Days Active First Week", y = "Conversion Rate")
```

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot conversion rates for days active
users %>% 
  filter(activated) %>% 
  group_by(active_3_days = days_active >= 3, converted) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(percent = users / sum(users)) %>% 
  filter(converted) %>% 
  buffplot(aes(x = active_3_days, y = percent)) +
  geom_col() +
  scale_y_continuous(labels = percent, 
                     limits = c(0, 0.14), 
                     breaks = seq(0, 0.14, 0.02)) +
  labs(x = "Active 3 Days in First Week", y = "Conversion Rate")
```

## Posts Created in First 7 Days
We'll plot the distribution for both those that converted and those that didn't.

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot distribution of days active
users %>% 
  filter(activated) %>% 
  buffplot(aes(x = posts_created, color = converted)) +
  stat_ecdf() +
  coord_cartesian(xlim = c(0, 100)) +
  scale_x_continuous(breaks = seq(0, 100, 10)) +
  labs(x = "Posts Created First Week", y = NULL,
       fill = "Converted", 
       color = "Converted")
```

```{r}
# plot distribution of days active
p <- users %>% 
  filter(activated) %>% 
  buffplot(aes(x = posts_created, color = converted)) +
  stat_ecdf() +
  coord_cartesian(xlim = c(0, 100)) +
  scale_x_continuous(breaks = seq(0, 100, 10)) +
  labs(x = "Posts Created First Week", y = NULL,
       fill = "Converted", 
       color = "Converted")

# get data 
p_data <-layer_data(p) %>% 
  select(x, y, group) %>% 
  rename(posts = x, prop = y) %>% 
  mutate(converted = ifelse(group == 1, "not_converted", "converted")) %>% 
  select(-group)

# widen data and calculate difference
p_wide <- p_data %>% 
  pivot_wider(names_from = converted, values_from = prop) %>% 
  mutate(gap = not_converted - converted) %>% 
  arrange(desc(abs(gap)))
```

The largest gap comes at 5 posts, but the gap from 5-10 posts is very similar. The conversion rate of _activated_ users that did not create 5 posts is 3.2%, whereas the conversion rate activated users that created 5 or more posts is 9.4%. 



Only 24% of users that activate create 10 or more posts in their first week. Of those that do, around 12.2$ end up converting, compared to 3.9% of activated and created 9 or fewer posts.

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot conversion rates for 5 posts
users %>% 
  filter(activated) %>% 
  group_by(ten = posts_created >= 10, converted) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(percent = users / sum(users)) %>% 
  filter(converted) %>% 
  buffplot(aes(x = ten, y = percent)) +
  geom_col() +
  scale_y_continuous(labels = percent, 
                     limits = c(0, 0.125), 
                     breaks = seq(0, 0.125, 0.02)) +
  labs(x = "Created 10 Posts in First Week", y = "Conversion Rate")
```

## Channels Connected First Week
A higher proportion of signups that end up converting connect at least 3 channels in their first week after signing up.

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot distribution of days active
users %>% 
  filter(activated) %>% 
  group_by(converted, channels_connected) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(percent = users / sum(users)) %>% 
  filter(channels_connected <= 10) %>% 
  buffplot(aes(x = channels_connected, y = percent, fill = converted)) +
  geom_col() +
  facet_wrap(~converted, scales = "free_y") +
  scale_x_continuous(breaks = seq(0, 10, 2)) + 
  scale_y_continuous(labels = percent) +
  labs(x = "Channels Connected First Week", fill = "Converted", y = NULL)
```

Those that activate and connect at least three channels have significantly higher conversion rates than those that do not.

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot conversion rates for 5 posts
users %>% 
  filter(activated) %>% 
  group_by(three_channels = channels_connected >= 3, converted) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(percent = users / sum(users)) %>% 
  filter(converted) %>% 
  buffplot(aes(x = three_channels, y = percent)) +
  geom_col() +
  scale_y_continuous(labels = percent, 
                     limits = c(0, 0.09), 
                     breaks = seq(0, 0.09, 0.02)) +
  labs(x = "Connected 3 Channels in First Week", y = "Conversion Rate")
```

## Posts Created and Channels Connected in First Week
Approximately 14% of people that sign up connect at least 3 channels and 10 posts in their first week. Of those, around 13.4% convert. 

Of activated users that don't connect 3 channels and 10 posts, around 4.7% convert.

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot conversion rates for 5 posts
users %>% 
  filter(activated) %>% 
  group_by(qualified = channels_connected >= 3 & posts_created >= 10, converted) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(percent = users / sum(users)) %>% 
  filter(converted) %>% 
  buffplot(aes(x = qualified, y = percent)) +
  geom_col() +
  scale_y_continuous(labels = percent, 
                     limits = c(0, 0.14), 
                     breaks = seq(0, 0.14, 0.02)) +
  labs(x = "Connected 3 Channels and 10 Posts in First Week", y = "Conversion Rate")
```


## Publishing a Start Page
Publishing a Start Page is not correlated with conversion.

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot conversion rates for 5 posts
users %>% 
  filter(activated & signup_date >= "2021-11-01") %>% 
  group_by(sp = sp_actions >= 1, converted) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(percent = users / sum(users)) %>% 
  filter(converted) %>% 
  buffplot(aes(x = sp, y = percent)) +
  geom_col() +
  scale_y_continuous(labels = percent, 
                     limits = c(0, 0.07), 
                     breaks = seq(0, 0.07, 0.01)) +
  labs(x = "Published a Start Page", y = "Conversion Rate")
```

## Using Engagement Feature
Replying to a comment in Engage is highly correlated with conversion. However, only 1.9% of activated users use Engage.

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot conversion rates for 5 posts
users %>% 
  filter(activated) %>% 
  group_by(engage = engage_actions >= 1, converted) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(percent = users / sum(users)) %>% 
  filter(converted) %>% 
  buffplot(aes(x = engage, y = percent)) +
  geom_col() +
  scale_y_continuous(labels = percent, 
                     limits = c(0, 0.25), 
                     breaks = seq(0, 0.25, 0.05)) +
  labs(x = "Used Engage", y = "Conversion Rate")
```

## Viewing Analytics
Visiting analytics is also correlated with conversion, and around 15% of activated users do it. 

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot conversion rates for viewing analytics
users %>% 
  filter(activated) %>% 
  group_by(analytics = analyze_actions >= 1, converted) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(percent = users / sum(users)) %>% 
  filter(converted) %>% 
  buffplot(aes(x = analytics, y = percent)) +
  geom_col() +
  scale_y_continuous(labels = percent, 
                     limits = c(0, 0.15), 
                     breaks = seq(0, 0.15, 0.02)) +
  labs(x = "Viewed Analytics", y = "Conversion Rate")
```

## Session Days
There is a very clear relationship between session days and the probability of conversion in the first week after signing up.

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot distribution of days active
users %>% 
  filter(activated & sessions >= 1) %>% 
  group_by(converted, session_days) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(percent = users / sum(users)) %>% 
  buffplot(aes(x = session_days, y = percent, fill = converted)) +
  geom_col() +
  facet_wrap(~converted) +
  scale_y_continuous(labels = percent) +
  scale_x_continuous(breaks = seq(1, 7, 1)) +
  labs(x = "Days With Sessions in First Week", fill = "Converted", y = NULL)
```

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot conversion rates for days active
users %>% 
  filter(activated & sessions >= 1) %>% 
  group_by(session_days, converted) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(percent = users / sum(users)) %>% 
  filter(converted) %>% 
  buffplot(aes(x = session_days, y = percent)) +
  geom_col() +
  scale_y_continuous(labels = percent) +
  labs(x = "Days With Sessions First Week", y = "Conversion Rate")
```

Around 42% of activated signups have sessions for at least 3 days. Of those, approximately 11.1% convert to a paid plan. If an activated user only has sessions 2 or fewer days, around 3.6% convert.

```{r}
# calculate conversion rate
users %>% 
  filter(activated & sessions >= 1) %>% 
  group_by(sessions_3_days = session_days >= 3, converted) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(percent = users / sum(users))
```

Around 50% of people that convert have an average session duration of 11.5 minutes or more, whereas users that don't convert have an average session duration of 2.5 minutes.

If we look only at users that activate, around 50% of converted users have average session lengths of 13 minutes, whereas users that don't convert have an average session duration of 9.5 minutes or less.


```{r echo = FALSE, message = FALSE, warning = FALSE}
# plot avg session duration
users %>% 
  filter(activated & !is.na(avg_session_duration)) %>% 
  buffplot(aes(x = avg_session_duration, color = converted, fill = converted)) +
  geom_density(alpha = 0.7) +
  scale_x_continuous(limits = c(0, 100)) +
  labs(x = "Mean Session Duration in Minutes", y = "Density", 
       fill = "Converted", color = "Converted")
```

```{r}
# quantile breaks
q = c(.25, .5, .75)

#calculate quantiles by grouping variable
users %>%
  filter(!is.na(avg_session_duration)) %>% 
  group_by(converted) %>%
  summarize(quant25 = quantile(avg_session_duration, probs = q[1]), 
            quant50 = quantile(avg_session_duration, probs = q[2]),
            quant75 = quantile(avg_session_duration, probs = q[3]))
```


## Channels Connected in First 3 Days

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot distribution of days active
users %>% 
  filter(activated) %>% 
  group_by(converted, channels_connected) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  buffplot(aes(x = channels_connected, y = users, fill = converted)) +
  geom_col() +
  facet_wrap(~converted, scales = "free_y") +
  scale_x_continuous(labels = comma, limit = c(0, 10)) +
  labs(x = "Channels Connected", fill = "Converted", y = NULL)
```

Connecting at least 3 channels is indicative of success. If an activated user connects at least 3 channels, the conversion rate is 8%. If they don't it's 4.5%.

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot conversion rates for days active
users %>% 
  filter(activated) %>% 
  group_by(connected_3_channels = channels_connected >= 3, converted) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(percent = users / sum(users)) %>% 
  filter(converted)
```

## Logistic Regression
A logistic regression model indicates that all of these inputs have predictive value. The coefficients are largest for `mobile_signup`, `activated`, `trial_signup`, and `days_active`.

```{r warning = FALSE, message = FALSE}
# set new column
filtered <- users %>% 
  filter(sessions >= 1) %>% 
  mutate(response = ifelse(converted, 1, 0),
         connected_3_channels = channels_connected >= 3,
         active_3_days = days_active >= 3,
         sessions_3_days = session_days >= 3)

# create model
mod <- glm(response ~ mobile_signup + activated + trial_signup + session_days +
            channels_connected + avg_session_duration + sessions, 
            data = filtered, family = "binomial")

# summarize model
summary(mod)
```

We'll create a second model.

```{r}
# create model
mod2 <- glm(response ~ activated + sessions_3_days, 
            data = filtered, family = "binomial")

# summarize model
summary(mod2)
```

## Lasso Regression
Simply put, lasso regression shrinks the coefficients of predictors to 0 if they don't explain a sufficient amount of the variance in the response.

A lasso regression model is fit with the simple command below. 

```{r include = FALSE, warning = FALSE, message = FALSE}
# define response variable
y <- users$response

# define matrix of predictor variables
features <- users %>% 
  mutate(connected_3_channels = channels_connected >= 3,
         active_3_days = days_active >= 3) %>% 
  select(mobile_signup, trial_signup, activated, days_active,
         channels_connected, actions, trials_started, 
         sessions, avg_session_duration)

# turn strings into factors
features <- as.data.frame(unclass(features), stringsAsFactors = TRUE)

# create matrix
x <- as.matrix(features)
```

```{r}
# fit lasso regression model
mod <- cv.glmnet(x, y, alpha = 1)

# plot model
plot(mod)
```

```{r}
# get best lambda value
bestlam <- mod$lambda.min

# show coefficients
predict(mod, type = "coefficients", s = bestlam)
```

We can see that the coefficients for `mobile_signup` and `is_team_member` have been shrunk to 0. The rest of the features may have some predictive value, however more time should be spent on feature engineering and model tuning than we have to complete this analysis. 


## Number of Days Active and Conversion
One of the coefficients remaining in the lasso regression model was `days_active`, which refers to the number of days in which a key action was taken during the 14 days after signup. 

The plot below shows the number of days active on the x-axis and the conversion rate on the y-axis. We can see that there is a relationship, though it isn't completely linear. Users that are active around 7 days are more likely to convert, and users that are active every day are very likely to convert.

We have to remember that the actions could have been taken _after_ users convert, so there might be some reverse causality here.

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot conversion rate by days active
users %>% 
  group_by(trial_signup, days_active, converted_30day) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(prop = users / sum(users)) %>% 
  filter(converted_30day) %>% 
  buffplot(aes(x = days_active, y = prop, fill = trial_signup)) +
  geom_col(show.legend = F) +
  facet_wrap(~trial_signup, scales = "free_y") +
  labs(x = "Days Active in First 14 Days", y = "Conversion Rate",
       fill = "Trial Signup") +
  scale_y_continuous(labels = percent)
```

Next we'll shift gears and look at activation, which is defined as having taken one's first key action.



## Actions First Day


```{r eval = FALSE, warning = FALSE, message = FALSE}
# define sql query
sql <- "
  select
    u.user_id
    , u.stripe_customer_id
    , u.signup_at_date as signup_date
    , date_trunc(u.signup_at_date, week) as signup_week
    , u.did_signup_from_mobile as mobile_signup
    , u.is_team_member
    , u.is_currently_trialing
    , u.did_signup_on_trial as trial_signup
    , avg(ss.session_duration_minutes) as avg_session_duration
    , count(distinct ss.session_id) as sessions
    , date(min(a.timestamp)) as activated_at
    , date(min(s.first_paid_invoice_created_at)) as converted_date
    , count(distinct ss.session_id) as sessions
    , count(distinct case when a.product = 'publish' then a.id end) as posts_created
    , count(distinct case when a.product = 'analyze' then a.id end) as analyze_actions
    , count(distinct case when a.product = 'engage' then a.id end) as engage_actions
    , count(distinct case when a.product = 'start_pages' then a.id end) as sp_actions
    , count(distinct ios.id) as ios_app_opens
    , count(distinct aoa.id) as android_app_opens
    , count(distinct ch.id) as channels_connected
  from dbt_buffer.buffer_users as u
  left join dbt_buffer.stripe_paid_subscriptions as s
    on u.stripe_customer_id = s.customer_id
    and s.first_paid_invoice_created_at >= u.signup_at
  left join dbt_buffer.buffer_key_actions as a
    on u.user_id = a.user_id
    and a.timestamp >= u.signup_at
    and a.timestamp < timestamp_add(u.signup_at, interval 1 day)
  left join dbt_buffer.segment_channels_connected as ch
    on u.user_id = ch.user_id
    and ch.timestamp >= u.signup_at
    and ch.timestamp < timestamp_add(u.signup_at, interval 1 day)
  left join segment_publish_ios.application_opened as ios
    on u.user_id = ios.user_id
    and ios.timestamp >= u.signup_at
    and ios.timestamp < timestamp_add(u.signup_at, interval 1 day)
  left join segment_publish_android.application_opened as aoa
    on u.user_id = aoa.user_id
    and aoa.timestamp >= u.signup_at
    and aoa.timestamp < timestamp_add(u.signup_at, interval 1 day)
  left join dbt_buffer.segment_sessions as ss
    on ss.dbt_visitor_id = u.user_id
    and ss.started_at >= u.signup_at
    and ss.signup_session
  where u.signup_at >= '2021-11-01'
  group by 1,2,3,4,5,6,7,8
"

#  connect to bigquery
con <- dbConnect(
  bigrquery::bigquery(),
  project = "buffer-data"
)

# collect data from bigquery
first_day <- dbGetQuery(con, sql, page_size = 250000)

# save data as rds object
saveRDS(first_day, "free_cohorts_first_day.rds")
```

```{r include = FALSE}
# read data
first_day <- readRDS("free_cohorts_first_day.rds")

# tidy data
first_day <- first_day %>% 
  filter(!is_team_member & signup_date < "2022-07-05") %>% 
  mutate(converted = (!is.na(converted_date) & 
           as.numeric(converted_date - signup_date) <= 30),
         activated = !is.na(activated_at) &
           as.numeric(activated_at - signup_date) <= 7)
```

## Percent Active in Each Product

```{r echo = FALSE, warning = FALSE, message = FALSE}
# percent active in publish
publish <- first_day %>% 
  filter(converted) %>% 
  group_by(active_publish = posts_created >= 1) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(prop = users / sum(users)) %>% 
  filter(active_publish) %>% 
  mutate(prod = "publish") %>% 
  select(prod, prop)

# percent active in engage
engage <- first_day %>% 
  filter(converted) %>% 
  group_by(active_engage = engage_actions >= 1) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(prop = users / sum(users)) %>% 
  filter(active_engage) %>% 
  mutate(prod = "engage") %>% 
  select(prod, prop)

# percent active in analyze
analyze <- first_day %>% 
  filter(converted) %>% 
  group_by(active_analyze = analyze_actions >= 1) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(prop = users / sum(users)) %>% 
  filter(active_analyze) %>% 
  mutate(prod = "analyze") %>% 
  select(prod, prop)

# percent active in sp
sp <- first_day %>% 
  filter(converted) %>% 
  group_by(active_sp = sp_actions >= 1) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(prop = users / sum(users)) %>% 
  filter(active_sp) %>% 
  mutate(prod = "start_page") %>% 
  select(prod, prop)

# merge all
products <- publish %>% 
  bind_rows(engage) %>% 
  bind_rows(analyze) %>% 
  bind_rows(sp)

# plot percent active in each product
products %>% 
  mutate(prod = reorder(prod, -prop)) %>% 
  buffplot(aes(x = prod, y = prop)) +
  geom_col() +
  scale_y_continuous(labels = percent) +
  labs(x = "Feature", y = "Proportion of Converted Users", 
       subtitle = "% Using Each Feature in First Day")
```

```{r}
# percent of converted people that created start page but didn't connect channel
first_day %>% 
  filter(converted) %>% 
  group_by(in_group = sp_actions >= 1 & channels_connected == 0) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(prop = users / sum(users))
```

## Posts Created First Day

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot distribution of days active
first_day %>% 
  filter(channels_connected >= 1) %>% 
  buffplot(aes(x = posts_created, color = converted)) +
  stat_ecdf() +
  coord_cartesian(xlim = c(0, 50)) +
  scale_x_continuous(breaks = seq(0, 50, 5)) +
  labs(x = "Posts Created First Day", y = NULL,
       fill = "Converted", 
       color = "Converted")
```

```{r}
# plot for posts in first day
p <- first_day %>% 
  filter(channels_connected >= 1) %>% 
  buffplot(aes(x = posts_created, color = converted)) +
  stat_ecdf()

# get data 
p_data <-layer_data(p) %>% 
  select(x, y, group) %>% 
  rename(posts = x, prop = y) %>% 
  mutate(converted = ifelse(group == 1, "not_converted", "converted")) %>% 
  select(-group)

# widen data and calculate difference
p_wide <- p_data %>% 
  pivot_wider(names_from = converted, values_from = prop) %>% 
  mutate(gap = not_converted - converted) %>% 
  arrange(desc(abs(gap)))
```

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot difference in percent of users with at least X posts
p_wide %>% 
  buffplot(aes(x = posts, y = gap)) +
  geom_line() +
  scale_x_continuous(limits = c(0, 50)) +
  scale_y_continuous(labels = percent) +
  labs(x = "Posts Created First Day", y = NULL,
       subtitle = "Difference in Percent of Users With >= X Posts")
```


At least 3 posts in the first day, given that a channel was connected. The conversion rate of those with at least 3 posts is 7.2%, compared to 3.0%. Approximately 22% of people that connect channels create at least 3 posts.

```{r echo = FALSE, warning = FALSE, message = FALSE}
# plot conversion rates for viewing analytics
first_day %>% 
  filter(channels_connected >= 1) %>% 
  group_by(posted = posts_created >= 3, converted) %>% 
  summarise(users = n_distinct(user_id)) %>% 
  mutate(percent = users / sum(users)) %>% 
  filter(converted) %>% 
  buffplot(aes(x = posted, y = percent)) +
  geom_col() +
  scale_y_continuous(labels = percent, limits = c(0, 0.08)) +
  labs(x = "Created 3 Posts", y = "Conversion Rate")
```

